use-shipctl-master: &masterShipctl
  - pushd /tmp
  - git clone https://github.com/trriplejay/node.git
  - ./node/shipctl/$SHIPPABLE_NODE_ARCHITECTURE/$SHIPPABLE_NODE_OPERATING_SYSTEM/install.sh
  - popd


resources:
  - name: stateA
    type: state

  - name: stateB
    type: state

  - name: stateRepo
    type: gitRepo
    integration: github
    versionTemplate:
      branch: state
      sourceName: trriplejay/sample_pipelines

  - name: outRepo
    type: gitRepo
    integration: github
    versionTemplate:
      branch: master
      sourceName: trriplejay/sample_pipelines
      buildOnCommit: false

  - name: paramsA
    type: params
    versionTemplate:
      params:
        paramsA_foo: bar
        paramsA_hello: world

  - name: paramsB
    type: params
    versionTemplate:
      params:
        btest: true

jobs:
  - name: setupJob
    type: runSh
    runtime:
      nodePool: u16-dyna
    steps:
      - IN: sample_pipelines_state_rSync
      - TASK:
          name: set-up-A
          script:
            - shipctl put_resource_state stateA foo bar
            - if [ -n "$CUSTOM" ]; then shipctl put_resource_state stateA custom "$CUSTOM"; fi
            - echo "testing 1..2..3" > test.txt
            - shipctl copy_file_to_resource_state test.txt stateA
      - TASK:
          name: set-up-B
          script:
            - shipctl put_resource_state stateB test value
            - if [ -n "$CUSTOM" ]; then shipctl put_resource_state stateB custom "$CUSTOM"; fi
      - OUT: stateA
        overwrite: true
      - OUT: stateB
        overwrite: true

  - name: testState1
    type: runSh
    runtime:
      nodePool: u16-dyna
    steps:
      - IN: setupJob
      - IN: stateRepo
        switch: off
      - IN: stateA
        switch: off
      - OUT: stateA
      - OUT: stateB
      - IN: paramsA
      - OUT: paramsB
      - OUT: outRepo
      - OUT: shippable_java_test_ciRepo #must be added to pipeline separately
      - TASK:
          script:
            # - sudo apt-get update # ubuntu
            # - sudo apt-get install -y tree # ubuntu
            # - yum install -y tree # centos
            # - alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'" # macos
            - *masterShipctl
            ######### Error checking
            - shipctl replicate paramsA stateRepo || true  # same type if non-repo

            ######### state
            ## stateA stuff
            - cat $JOB_PATH/IN/stateA/version.json
            # - tree $JOB_PATH/IN/stateA/state #because it is IN and OUT
            - shipctl replicate stateA stateA --metadata-only
            # - tree $STATEA_STATE
            ## stateB stuff
            - cat $JOB_PATH/OUT/stateB/version.json
            # - tree $STATEB_STATE
            - shipctl replicate stateA stateB --files-only
            # - tree $STATEB_STATE
            ######### params
            - shipctl replicate paramsA paramsB
            ######### repo
            - shipctl replicate stateRepo outRepo
            - shipctl replicate stateRepo shippable_java_test_ciRepo || true

  - name: testState2
    dependencyMode: strict
    type: runSh
    steps:
      - IN: stateB
      - IN: stateA
      - IN: paramsA
        switch: off
      - IN: paramsB
        switch: off
      - IN: outRepo
        switch: off
      - IN: testState1

      # - TASK:
      #     name: stateA-details
      #     script:
      #       - echo "------------------ file list"
      #       - ls -latr $(shipctl get_resource_state stateA)
      #       - echo "------------------ version contents"
      #       - cat $(shipctl get_resource_meta stateA)/version.json | jq '.version'
      # - TASK:
      #     name: stateB-details
      #     script:
      #       - echo "------------------ file list"
      #       - ls -latr $(shipctl get_resource_state stateB)
      #       - echo "------------------ version contents"
      #       - cat $(shipctl get_resource_meta stateB)/version.json | jq '.version'
      - TASK:
          name: paramsB-details
          script:
            - cat $(shipctl get_resource_meta paramsB)/version.json | jq '.version.propertyBag'
            - printenv
      - TASK:
          name: gitRepo-details
          script:
            - cat $(shipctl get_resource_meta outRepo)/version.json | jq '.version.propertyBag'
