# Language setting
language: python

# Version number
python:
  - 2.7

build:
  ci:
    - python --version
    - echo "hello"


jobs:
  - name: test_entropy
    type: runSh
    flags: runShSample
    runtime:
      container: false
    steps:
      - TASK:
          script:
            - uname -a
      #      - lsb_release -a
      #      - apt-get install -y rng-tools=4-0ubuntu2.1
            - yum install -y rng-tools-6.3.1-3.el7

      #- TASK:
      #    script:
      #      - apt-get install -y ent
      #      - cat /proc/sys/kernel/random/entropy_avail
      #      - head -c 1K /dev/random > /tmp/out
      #      - cat /proc/sys/kernel/random/entropy_avail
      #      - ent /tmp/out
      #      - apt-get install -y rng-tools
      #      - cat /proc/sys/kernel/random/entropy_avail
      #      - head -c 100K /dev/random > /tmp/out
      #      - cat /proc/sys/kernel/random/entropy_avail
      #      - ent /tmp/out
  # - name: test_some_integrations
  #   type: runSh
  #   flags: runShSample
  #   steps:
  #     - IN: test-aws-runShSample
  #     - IN: test-gcloud-runShSample
  #     - IN: test-jfrog-runShSample
  #     - IN: test-kube-runShSample
  #     - IN: test-ssh-runShSample
  #     - TASK:
  #         script:
  #           - echo "hi"

  #- name: sample_jacoco_runCI
  #  type: runCI
  #  flags:
  #    - runShSample
  #  steps:
  #    - OUT: fake-image

  # - name: simple-mani-runShSample
  #  type: manifest
  #  flags:
  #    - runShSample
  #  steps:
  #    - IN: simple-image-runShSample
  #    - IN: myParams-runShSample
  #    #- IN: sample_python_runCI

#  - name: simpleserver_runCI
#    type: runCI
#    flags:
#      - runShSample
#    steps:
#      - OUT: myRepo-runShSample
#        replicate: simpleserver_ciRepo

  - name: out-mani-runShSample
    type: manifest
    flags:
      - runShSample
    steps:
      - IN: simple-image-runShSample

  - name: test-mani-runShSample
    type: manifest
    flags:
      - runShSample
    steps:
      - IN: testOutImage-runShSample


  - name: simple-release-runShSample
    type: release
    flags:
      - runShSample
    steps:
      # - IN: simple-mani-runShSample
      - IN: simple-version-runShSample
      - TASK: managed
        bump: patch

  - name: runShMainCheck-runShSample
    type: runSh
    dependencyMode: strict
    flags:
      - runShSample
    integrations:
      - test-jira
    steps:
      - IN: test-jira-res
      - IN: dockerConfig-runShSample
      - IN: myRepo-runShSample
      - TASK:
          script:
            - docker images
            - docker ps -a
            - ls -latr
            - shipctl notify test-jira-res --project-id=MYAP --type=Bug --description="failure in $BUILD_NUMBER" --summary="something went wrong"
            - shipctl notify test-jira-res --project-id=MYAP --type=Story --description="once upon a time, in a build called $BUILD_NUMBER" --summary="this is my story"
            - shipctl notify test-jira-res --project-id=MYAP --type=Bug --description="see attachment $BUILD_NUMBER" --summary="something went wrong. see attachment" --attach-file=message.json


    always:
      script:
        - docker stop -t=0 $id
    on_success:
      script:
        - echo "hi there"
    on_failure:
      script:
        - echo "booooooo-urns"

  - name: successSh
    type: runSh
    steps:
      - TASK:
        - script: echo "hi"
        - script: echo "this is weird" >> $JOB_STATE/stuff.txt

  - name: runSh2Check-runShSample
    type: runSh
    dependencyMode: immediate
    flags:
      - runShSample
    runtime:
      nodePool: w16-dyna
    steps:
      - IN: sample_pipelines_runShSample_rSync
#      - IN: myRepo-runShSample
#        switch: off
      - TASK:
        - script: echo "wow"
        - script: sleep 500
  - name: test_win_write
    type: runSh
    flags:
      - runShSample
    runtime:
      nodePool: w16-dyna
    steps:
      - TASK:
          script:
            - echo "hello world" > output.txt
            - shipctl copy_file_to_state output.txt

  - name: test_win_read
    type: runSh
    flags:
      - runShSample
    steps:
      - IN: test_win_write
      - TASK:
          script:
            - shipctl copy_file_from_resource_state test_win_write output.txt .
            - cat output.txt

  - name: runShCheck-runShSample
    type: runSh
    flags:
      - runShSample
    #runtime:
    #  nodePool: testARM
    steps:
      # - IN: azureConfig
      #   scopes:
      #     - aks
      #- IN: stagingTrigger-runShSample
      #- IN: simple-release-runShSample
      #- IN: gkeConfig-runShSample
#      - IN: myRepo-runShSample
#        switch: off
      - IN: nonum-DockerOpts-runShSample
      - IN: test-mani-runShSample
      - IN: myParams-runShSample
      - IN: myParams-runShSample-2
      - IN: 123-testDockerOpts-runShSample
      - IN: successSh
      - OUT: stagingTrigger-runShSample
      #- IN: test-docker-op
      #- OUT: testOutImage-runShSample
      #- IN: test-int-runShSample
      #- OUT: out-mani-runShSample
      # - IN: test-aws-runShSample
        scopes:
          - ecr
      - TASK:
          name: myZerothTask
          # runtime:
          #   container: false
          script:
            - which docker
            - docker info
            - docker ps -a
            - echo "hello \n world"
      - TASK:
          name: myFirstTask
          # runtime:
          #   options:
          #     imageName: trriplejay/simpleserver
          #     imageTag: master.49
          #     pull: true
          #     options: --privileged=true
          script:
            # - script: sudo apt-get install -y tree
            - which shipctl
            - which docker
            - docker info
            - docker images
            - count=$(shipctl get_resource_version_key stagingTrigger-runShSample count)
            - ((count+=1))
            - shipctl put_resource_state stagingTrigger-runShSample count $count
            # - docker tag drydock/u16all:v6.3.4 111799685573.dkr.ecr.us-east-1.amazonaws.com/test:latest
            # - docker push 111799685573.dkr.ecr.us-east-1.amazonaws.com/test:latest
            - echo "$(shipctl get_resource_name myParams-runShSample)"
            - echo "$(shipctl get_resource_name myParams-runShSample-2)"
            - echo "$MYPARAMSRUNSHSAMPLE2_NAME"
            - echo "$MYPARAMSRUNSHSAMPLE_NAME"
            # - script: result=$(eval $action)
            # - script: echo "$result"
            - echo "$NVM_DIR"
            # - script: tree /build
            - printenv
            - ls -al /build/IN/test-mani-runShSample/manifest
            - shipctl copy_resource_file_from_state test-mani-runShSample manifests.json $PWD
            - echo "$(shipctl get_resource_env job name)"
            - echo "$(shipctl get_resource_env job triggered_by_nAmE)"
            - echo "$(shipctl get_resource_env test-mani-runShSample name)"
            - echo "$(shipctl get_resource_env myRepo-runShSample commit)"
            - echo "$(shipctl get_resource_env myRepo-runShSample commit_MESSAGE)"
            - echo "$(shipctl get_resource_env myRepo-runShSample ssh_url)"
            - echo "manifest sha... $(shipctl get_resource_version_key test-mani-runShSample sha)"
            - ls -a $PWD
            # - sleep 30
            # - script: kubectl version
            # - script: aws --version
            #- script: az --debug component update
            #- script: kubectl get namespaces
            # - script: mkdir -p /root/.kube/
            # - script: eval echo -e $(cat $TESTINTRUNSHSAMPLE_META/integration.json | jq '.masterKubeConfigContent')
            # - script: echo -e "\nspacer\n"
            # - script: eval echo -e $(cat $TESTINTRUNSHSAMPLE_META/integration.json | jq '.masterKubeConfigContent') > /root/.kube/config
            # - script: echo "=============THE CONFIG FILE:"
            # - script: cat /root/.kube/config
            # #- script: echo -e $TESTINTRUNSHSAMPLE_INTEGRATION_MASTERKUBECONFIGCONTENT
            # #- script: echo -e $TESTINTRUNSHSAMPLE_INTEGRATION_MASTERKUBECONFIGCONTENT > /root/.kube/config
            # #- script: cat /root/.kube/config
            # - script: kubectl version
            # - script: echo "resource ID is $RESOURCE_ID"
            - cd $(shipctl get_resource_state testOutImage-runShSample)
            - shipctl put_resource_state testOutImage-runShSample versionName $BUILD_NUMBER
            - shipctl put_resource_state testOutImage-runShSample extraProperty $JOB_NAME
            # - sleep 300
            # - echo "versionName=$BUILD_NUMBER" > /build/state/testOutImage-runShSample.env
            # - script: echo "versionName=$BUILD_NUMBER" > /build/state/runShCheck-runShSample.env
            # - echo "extraProperty=$JOB_NAME" >> /build/state/testOutImage-runShSample.env
            # - script: sudo docker images
            # - script: sudo docker ps
            # - script: sudo apt-get install -y jq
            # - script: ls -latr /build/state
            # - script: cat /build/state/testOutImage-runShSample.env
            # - script: which envsubst
            # - script: cat /build/state/runShCheck-runShSample.env
            # #- script: ls -latr /build/IN/simple-release-runShSample/release
            # #- script: cat $RUNSHCHECKRUNSHSAMPLE_PATH/message.json | jq '.'
            # - script: ls -latr OUT/myParams-runShSample
            - echo "my subshell result is- $SHIPPABLE_API_URL"
            # - script: cat $MYPARAMSRUNSHSAMPLE_PATH/params
            # - script: cat $MYPARAMSRUNSHSAMPLE_PATH/version.json | jq '.'
            # - script: echo "newParam=blahblahblah" >> state/$MYPARAMSRUNSHSAMPLE_NAME.env
            # - script: cat IN/test-docker-op/version.json | jq '.'
            # - script: 'echo "ssh keyfile location is: $MY_SSH_KEYPATH"'
            # - script: 'echo "pem keyfile location is: $MY_PEM_KEYPATH"'
            # - script: ls -a $MY_SSH_PATH
            # - script: ls -a $MY_PEM_PATH
            # - script: ssh-add $MY_SSH_KEYPATH

    on_failure:
      script:
        - echo "something failed"
    on_success:
      - script: echo "yay it worked"
      # - NOTIFY: myEmail-runShSample


  - name: testAlpine
    type: runSh
    steps:
      - TASK:
          name: "boot-alpine"
          runtime:
            options:
              imageName: alpine
              imageTag: 3.7
          script:
            - echo "hello world"

resources:

  - name: test-jira-res
    type: notification
    integration: test-jira-account-based

  - name: 123-testDockerOpts-runShSample
    type: dockerOptions
    flags:
      - runShSample
    versionTemplate:
      foo: "bar"
  - name: nonum-DockerOpts-runShSample
    type: dockerOptions
    flags:
      - runShSample
    versionTemplate:
      fizz: "buzz"

  - name: testOutImage-runShSample
    type: image
    flags:
      - runShSample
    pointer:
      sourceName: "trriplejay/msgbase"
      region: us-east-1
    seed:
      versionName: "latest"

  - name: simple-version-runShSample
    type: version
    flags:
      - runShSample
    seed:
      versionName: 1.0.0

  # - name: azureConfig
  #   type: cliConfig
  #   integration: myAzureCreds
  #   pointer:
  #     groupName: testKube
  #     clusterName: blah-cluster

  # - name: gkeConfig-runShSample
  #   type: cliConfig
  #   integration: MyGkeCredentials
  #   versionTemplate:
  #     clusterName: cluster-1
  #     region: us-central1-f

  - name: awsConfig-runShSample
    type: cliConfig
    integration: MyAwsSoftSrvKeys
    versionTemplate:
      region: us-east-1

  - name: dockerConfig-runShSample
    type: cliConfig
    integration: "trriplejay docker hub"

  - name: test-docker-op
    type: dockerOptions
    flags:
      - runShSample
    version:
      cpuShares: 5
      memory: 300
  - name: myParams-runShSample-2
    type: params
    flags:
      - runShSample
    versionTemplate:
      params:
        one: two

  - name: myParams-runShSample
    type: params
    flags:
      - runShSample
    version:
      params:
        hello: world
        test: 123
        action: "$(echo $SHIPPABLE_API_URL)"
        testParam: $(eval touch testParams.txt)
#        secure: A3OCCNyoIqC05NyP9Gy4Edq7bi8TC2KIav7/wlkNEJov0WHs90miT72rXwaiq5ExCQ28hgQ6uHxCOqihCVznwZylq5khHgN2zEPZuTvzF2KrzVzTu69XaDSlKgGuvMdNnAcnH4BOivqzwBWO2yJnmf4Wi5UpS1OLKziYH5akvHqswqEO/+A8cdUYnKaYvTLMALYGI4WeKZrng8Ry9LXjRN2WEDkkRmHZgpxFBrmVbAxGScrpnsOs7lpPoBibQ9fHOq5DgOtiqVFqXc55rZRI0q0ZKJwzSmxdTkp7pJuT+WJ7BfJQpcHObjnL0C0QuKyKKg2eLZ/QDwce3pctZUHBSA==

  - name: simple-image-runShSample
    type: image
    flags:
      - runShSample
    pointer:
      sourceName: "trriplejay/simpleserver"
    seed:
      versionName: "master.58"

  - name: myRepo-runShSample
    type: gitRepo
    flags:
      - runShSample
    integration: "github"
    versionTemplate:
      sourceName: trriplejay/simpleserver
      buildOnCommit: false


  # - name: test-int-runShSample
  #   type: integration
  #   integration: MyKubeCredentials

  - name: myEmail-runShSample
    type: notification
    versionTemplate:
      method: email
      recipients:
        - john@shippable.com
  - name: stagingTrigger-runShSample
    type: trigger
    flags:
      - runShSample
    version:
      count: 5
      message: 'trigger runShSteps: 1'


  # - name: test-aws-runShSample
  #   type: cliConfig
  #   integration: test-aws
  #   versionTemplate:
  #     region: us-east-1


  # - name: test-gcloud-runShSample
  #   type: cliConfig
  #   integration: test-gcloud
  #   versionTemplate:

  # - name: test-jfrog-runShSample
  #   type: cliConfig
  #   integration: test-jfrog

  # - name: test-kube-runShSample
  #   type: cliConfig
  #   integration: test-kube

  # - name: test-ssh-runShSample
  #   type: cliConfig
  #   integration: test-ssh
